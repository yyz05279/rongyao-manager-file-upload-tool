name: Build Tauri App

on:
    push:
        tags:
            - "v*"
    workflow_dispatch:

jobs:
    build:
        strategy:
            fail-fast: false
            matrix:
                include:
                    - platform: "macos-latest"
                      args: "--target universal-apple-darwin"
                    - platform: "windows-latest"
                      args: ""

        runs-on: ${{ matrix.platform }}

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"

            - name: Install Rust stable
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

            - name: Install dependencies (macOS)
              if: matrix.platform == 'macos-latest'
              run: |
                  cd tauri-app
                  npm ci

            - name: Install dependencies (Windows)
              if: matrix.platform == 'windows-latest'
              run: |
                  cd tauri-app
                  npm ci

            - name: Import Code Signing Certificate (macOS)
              if: matrix.platform == 'macos-latest'
              env:
                  APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
                  APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
                  KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
              run: |
                  # 创建临时钥匙串
                  KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
                  security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
                  security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
                  security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

                  # 导入证书
                  echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
                  security import certificate.p12 -k $KEYCHAIN_PATH -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
                  security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

                  # 设置为默认钥匙串
                  security list-keychain -d user -s $KEYCHAIN_PATH

                  # 验证证书已导入
                  security find-identity -v -p codesigning $KEYCHAIN_PATH

            - name: Build Tauri App (macOS)
              if: matrix.platform == 'macos-latest'
              env:
                  APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
              run: |
                  cd tauri-app
                  npm run tauri build -- ${{ matrix.args }}

            - name: Build Tauri App (Windows)
              if: matrix.platform == 'windows-latest'
              run: |
                  cd tauri-app
                  npm run tauri build -- ${{ matrix.args }}

            - name: Upload macOS DMG
              if: matrix.platform == 'macos-latest'
              uses: actions/upload-artifact@v4
              with:
                  name: macos-dmg
                  path: tauri-app/src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg

            - name: Upload macOS App
              if: matrix.platform == 'macos-latest'
              uses: actions/upload-artifact@v4
              with:
                  name: macos-app
                  path: tauri-app/src-tauri/target/universal-apple-darwin/release/bundle/macos/*.app

            - name: Upload Windows Installer
              if: matrix.platform == 'windows-latest'
              uses: actions/upload-artifact@v4
              with:
                  name: windows-installer
                  path: |
                      tauri-app/src-tauri/target/release/bundle/msi/*.msi
                      tauri-app/src-tauri/target/release/bundle/nsis/*.exe

    release:
        needs: build
        runs-on: ubuntu-latest
        if: startsWith(github.ref, 'refs/tags/')

        steps:
            - name: Download artifacts
              uses: actions/download-artifact@v4
              with:
                  path: artifacts

            - name: Display structure of downloaded files
              run: ls -R artifacts

            - name: Create Release
              uses: softprops/action-gh-release@v1
              with:
                  files: |
                      artifacts/**/*
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
